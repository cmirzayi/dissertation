---
---
title: "DIABIMMUNE Cohort"
author: "Chloe Mirzayi"
format: html
editor: visual
---

## Antibiotics exposures in the DIABIMMUNE ABx Dataset

```{r, echo=FALSE, message=FALSE}
library(mia)
library(dplyr)
library(tidymodels)
library(stringr)
library(ggplot2)
library(dotwhisker)
library(biobroom)
library(phyloseq)
library(vegan)
library(gridExtra)
library(jtools)
library(microViz)
library(table1)
library(flextable)
```

### Load-in required data

Data were processed by Nephele

```{r}

phyloYassour <- import_biom("../data/Yassour/taxa.biom")
metaYassour <- read.csv("../data/Yassour/YassourM_2016_metadata.csv")
treeYassour <- read_tree("../data/Yassour/phylo/rooted_tree.nwk")
# One of the metadata rows is missing and should be removed
metaYass <- sample_data(metaYassour)
metaYass$SampleID <- metaYass$X.SampleID
metaYass <- metaYass[!is.na(metaYass$SampleID)]
sample_names(metaYass) <- metaYass$SampleID
sample_data(phyloYassour) <- metaYass
yass <- phyloYassour
phy_tree(yass) <- treeYassour
```

## Duplicate samples

```{r}
yassdd <- ps_dedupe(yass, vars=c("subject_id", "assessment_day"))
yassdupes <- yass
yass <- yassdd
```

### Calculate Beta diversity at each time point

Let's make a function!

```{r}

betaDivPlot <- function(x){
  dd <- sample_data(yass)$study_condition
  dd.col <- rainbow(length(dd))
  names(dd.col)  <- dd
  subphylo <- prune_samples(sample_data(yass)$subject_id==x, x=yass)
  bray <- phyloseq::distance(subphylo, method="bray") %>% as.matrix() %>% as.data.frame()
  bray$sample_id <- colnames(bray)
  phylosamp <- sample_data(yass) %>% data.frame()
  joined <- dplyr::inner_join (phylosamp, bray)
  minsamp <- joined %>% filter(infant_age==min(infant_age)) %>% select(sample_id) %>% .[1,1]
  joinsub <- joined %>% select(sample_id, infant_age, study_condition, braycurtis=all_of(minsamp)) %>% arrange(infant_age)
  joinsub$study_condition[is.na(joinsub$study_condition)] <- "no abx"
  plot <- ggplot(joinsub, aes(x=infant_age, y=braycurtis))+geom_line()+geom_point(aes(color=factor(study_condition))) +
    scale_color_manual("Legend", values = dd.col)+ theme_minimal() +theme(legend.position="none") +
  theme(axis.text.x=element_blank(), #remove x axis labels
        axis.ticks.x=element_blank(), #remove x axis ticks
        axis.text.y=element_blank(),  #remove y axis labels
        axis.ticks.y=element_blank(),
        axis.title.x=element_blank(),
        axis.title.y=element_blank()#remove y axis ticks
        ) 
  return(plot)
}
```

Test it out

```{r}
betaDivPlot("E010481")
```

```{r}
subjects <- yass %>% sample_data() %>% data.frame() %>%  arrange(desc(study_condition)) %>% .$subject_id %>% unique()
listPlots <- lapply(subjects, betaDivPlot)

n <- length(listPlots)
nCol <- floor(sqrt(n))
do.call("grid.arrange", c(listPlots, ncol=nCol))
```

Let's try it while removing early days which might be introducing a different effect

```{r}
yassleft <- subset_samples(yass, infant_age>=180)
```

```{r}
betaDivPlotLeft <- function(x){
  dd <- sample_data(yassleft)$study_condition
  dd.col <- rainbow(length(dd))
  names(dd.col)  <- dd
  subphylo <- prune_samples(sample_data(yassleft)$subject_id==x, x=yassleft)
  bray <- phyloseq::distance(subphylo, method="bray") %>% as.matrix() %>% as.data.frame()
  bray$sample_id <- colnames(bray)
  phylosamp <- sample_data(yassleft) %>% data.frame()
  joined <- dplyr::inner_join (phylosamp, bray)
  minsamp <- joined %>% filter(infant_age==min(infant_age)) %>% select(sample_id) %>% .[1,1]
  joinsub <- joined %>% select(sample_id, infant_age, study_condition, braycurtis=all_of(minsamp)) %>% arrange(infant_age)
  joinsub$study_condition[is.na(joinsub$study_condition)] <- "no abx"
  plot <- ggplot(joinsub, aes(x=infant_age, y=braycurtis))+geom_line()+geom_point(aes(color=factor(study_condition))) +
    scale_color_manual("Legend", values = dd.col)+ theme_minimal() +theme(legend.position="none") +
  theme(axis.text.x=element_blank(), #remove x axis labels
        axis.ticks.x=element_blank(), #remove x axis ticks
        axis.text.y=element_blank(),  #remove y axis labels
        axis.ticks.y=element_blank(),
        axis.title.x=element_blank(),
        axis.title.y=element_blank()#remove y axis ticks
        ) 
  return(plot)
}
```

```{r}
subjectsleft <- yassleft %>% sample_data() %>% data.frame() %>%  arrange(desc(study_condition)) %>% .$subject_id %>% unique()
listPlots <- lapply(subjectsleft, betaDivPlotLeft)

n <- length(listPlots)
nCol <- floor(sqrt(n))
do.call("grid.arrange", c(listPlots, ncol=nCol))
```

That didn't seem to do much. Let's average across study conditions and see if there's a difference

Calculate dissimilarity over time for each subject

Determine study condition and add to sample_data()

```{r}

studyconds <- sample_data(yass) %>% group_by(subject_id) %>% summarize(subject_id=dplyr::first(subject_id), abxexpose = n_distinct(study_condition)>1)

yass <- ps_join(yass, studyconds)
```

```{r}
betaValues <- function(x){
  dd <- sample_data(yass)$study_condition
  dd.col <- rainbow(length(dd))
  names(dd.col)  <- dd
  subphylo <- prune_samples(sample_data(yass)$subject_id==x, x=yass)
  bray <- phyloseq::distance(subphylo, method="bray") %>% as.matrix() %>% as.data.frame()
  bray$sample_id <- colnames(bray)
  phylosamp <- sample_data(yass) %>% data.frame()
  joined <- dplyr::inner_join (phylosamp, bray)
  minsamp <- joined %>% filter(infant_age==max(infant_age)) %>% select(sample_id) %>% .[1,1]
  joinsub <- joined %>% select(subject_id, sample_id, infant_age, agecat, study_condition, abxexpose, braycurtis=all_of(minsamp)) %>% arrange(infant_age)
  joinsub$study_condition[is.na(joinsub$study_condition)] <- "no abx"
  return(joinsub)
}
```

```{r, warning=FALSE, message=FALSE}
sample_data(yass)$agecat[sample_data(yass)$infant_age<100] <- "0-99 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=100 & sample_data(yass)$infant_age < 200] <- "100-199 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=200 & sample_data(yass)$infant_age < 300] <- "200-299 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=300 & sample_data(yass)$infant_age < 400] <- "300-399 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=400 & sample_data(yass)$infant_age < 500] <- "400-499 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=500 & sample_data(yass)$infant_age < 600] <- "500-599 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=600 & sample_data(yass)$infant_age < 700] <- "600-699 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=700 & sample_data(yass)$infant_age < 800] <- "700-799 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=800 & sample_data(yass)$infant_age < 900] <- "800-899 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=900 & sample_data(yass)$infant_age < 1000] <- "900-999 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=1000 & sample_data(yass)$infant_age < 1100] <- "x1000-1099 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=1100 & sample_data(yass)$infant_age < 1200] <- "x1100-1199 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=1200 & sample_data(yass)$infant_age < 1300] <- "x1200-1299 days"
```

```{r}
listValues <- lapply(subjects, betaValues)
dfValues <- as.data.frame(do.call(rbind, listValues)) %>% arrange(infant_age)
plotValues <- dfValues %>% group_by(abxexpose, agecat) %>% summarize(bc=mean(braycurtis))

ggplot(data=plotValues, aes(x=agecat, y=bc)) + geom_line(aes(group=abxexpose, color=abxexpose))+ scale_x_discrete(labels = function(x) str_wrap(x, width = 0.009))+theme(axis.text=element_text(size=6))
#90% band?
#PERMANOVA (adonis, vegan)
```

Calculate average dissimilarity for each time category

Select a time point then calculate average within participant dissimilarity within that timepoint

```{r}
t1cases <- prune_samples(sample_data(yass)$agecat=="800-899 days" & sample_data(yass)$abxexpose==TRUE, x=yass)
brayt1cases <- phyloseq::distance(t1cases, method="bray") %>% as.matrix()
brayt1cases %>% mean()

```

```{r}

avgBetaDivPlot <- function(x){
  dd <- sample_data(yass)$study_condition
  dd.col <- rainbow(length(dd))
  names(dd.col)  <- dd
  subphylo <- prune_samples(sample_data(yass)$subject_id==x, x=yass)
  bray <- phyloseq::distance(subphylo, method="bray") %>% as.matrix() %>% as.data.frame()
  bray$sample_id <- colnames(bray)
  phylosamp <- sample_data(yass) %>% data.frame()
  joined <- dplyr::inner_join (phylosamp, bray)
  minsamp <- joined %>% filter(infant_age==min(infant_age)) %>% select(sample_id) %>% .[1,1]
  joinsub <- joined %>% select(sample_id, infant_age, study_condition, braycurtis=all_of(minsamp)) %>% arrange(infant_age)
  joinsub$study_condition[is.na(joinsub$study_condition)] <- "no abx"
  return(joinsub)
}
```

```{r}
avgBetaDivPlot("E010481")
```

### PCOA

Simplify antibiotics exposures

```{r}
sample_data(yass)$penicillins <- 0
sample_data(yass)$cephalosporins <- 0
sample_data(yass)$macrolides <- 0
sample_data(yass)$sulfonamides <- 0
sample_data(yass)$other <- 0
sample_data(yass)$abx <- "none"


sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Amoxicillin"] <- "penicillins"


sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin"] <- "penicillins"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Amoxicillin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Cefalexin"] <- "cephalosporins"
sample_data(yass)$cephalosporins[sample_data(yass)$study_condition=="Cefalexin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid"] <- "penicillins"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Azithromycin"] <- "macrolides"
sample_data(yass)$macrolides[sample_data(yass)$study_condition=="Azithromycin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin, Amoxicillin and clavulanic acid"] <- "penicillins"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Amoxicillin, Amoxicillin and clavulanic acid"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Amoxicillin and clavulanic acid"] <- "penicillins"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Amoxicillin and clavulanic acid"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine, Amoxicillin"] <- "multi"
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine, Amoxicillin"] <- 1
  sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine, Amoxicillin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine"] <- "sulfonamides"
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin, Cefaclor, Azithromycin"] <- "multi"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Amoxicillin, Cefaclor, Azithromycin"] <- 1
sample_data(yass)$macrolides[sample_data(yass)$study_condition=="Amoxicillin, Cefaclor, Azithromycin"] <- 1
sample_data(yass)$cephalosporins[sample_data(yass)$study_condition=="Amoxicillin, Cefaclor, Azithromycin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Azithromycin, Cefalexin, Trimetoprime and sulfadiazine"] <- "multi"
sample_data(yass)$macrolides[sample_data(yass)$study_condition=="Azithromycin, Cefalexin, Trimetoprime and sulfadiazine"] <- 1
sample_data(yass)$cephalosporins[sample_data(yass)$study_condition=="Azithromycin, Cefalexin, Trimetoprime and sulfadiazine"] <- 1 
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Azithromycin, Cefalexin, Trimetoprime and sulfadiazine"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Azithromycin, Trimetoprime and sulfadiazine"] <- "multi"
sample_data(yass)$macrolides[sample_data(yass)$study_condition=="Azithromycin, Trimetoprime and sulfadiazine"] <- 1
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Azithromycin, Trimetoprime and sulfadiazine"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin, Cefalexin, Trimetoprime and sulfadiazine"] <- "multi"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Amoxicillin, Cefalexin, Trimetoprime and sulfadiazine"] <- 1
sample_data(yass)$cephalosporins[sample_data(yass)$study_condition=="Amoxicillin, Cefalexin, Trimetoprime and sulfadiazine"] <- 1
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Amoxicillin, Cefalexin, Trimetoprime and sulfadiazine"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Cefaclor"] <- "cephalosporins"
sample_data(yass)$cephalosporins[sample_data(yass)$study_condition=="Cefaclor"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Trimetoprime and sulfadiazine"] <- "multi"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Trimetoprime and sulfadiazine"] <- 1
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Trimetoprime and sulfadiazine"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Phenoxymethylpenicillin"] <- "penicillins"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Phenoxymethylpenicillin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Clarithromycin"] <- "macrolides"
sample_data(yass)$macrolides[sample_data(yass)$study_condition=="Clarithromycin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine, Trimetoprime and sulfadiazine"] <- "sulfonamides"
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine, Trimetoprime and sulfadiazine"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine, Amoxicillin and clavulanic acid"] <- "multi"
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine, Amoxicillin and clavulanic acid"] <- 1
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine, Amoxicillin and clavulanic acid"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Azithromycin, Amoxicillin and clavulanic acid"] <- "multi"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Azithromycin, Amoxicillin and clavulanic acid"] <- 1
sample_data(yass)$macrolides[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Azithromycin, Amoxicillin and clavulanic acid"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Clarithromycin, Cefalexin"] <- "multi"
sample_data(yass)$macrolides[sample_data(yass)$study_condition=="Clarithromycin, Cefalexin"] <- 1
sample_data(yass)$cephalosporins[sample_data(yass)$study_condition=="Clarithromycin, Cefalexin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Cefalexin, Amoxicillin"] <- "multi"
sample_data(yass)$cephalosporins[sample_data(yass)$study_condition=="Cefalexin, Amoxicillin"] <- 1
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Cefalexin, Amoxicillin"] <- 1
  
sample_data(yass)$abx[sample_data(yass)$study_condition=="Ceftriaxone, Ceftriaxone"] <- "cephalosporins"
sample_data(yass)$cephalosporins[sample_data(yass)$study_condition=="Ceftriaxone, Ceftriaxone"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin, Trimetoprime and sulfadiazine"] <- "multi"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Amoxicillin, Trimetoprime and sulfadiazine"] <- 1
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Amoxicillin, Trimetoprime and sulfadiazine"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Azithromycin, Amoxicillin and clavulanic acid" ] <- "multi"
sample_data(yass)$macrolides[sample_data(yass)$study_condition=="Azithromycin, Amoxicillin and clavulanic acid" ] <- 1
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Azithromycin, Amoxicillin and clavulanic acid" ] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Penicillin G, Netilmicin"] <- "multi"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Penicillin G, Netilmicin"] <- 1
sample_data(yass)$other[sample_data(yass)$study_condition=="Penicillin G, Netilmicin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Clarithromycin, Trimetoprime and sulfadiazine"] <- "multi"
sample_data(yass)$macrolides[sample_data(yass)$study_condition=="Clarithromycin, Trimetoprime and sulfadiazine"] <- 1
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Clarithromycin, Trimetoprime and sulfadiazine"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Ceftriaxone"] <- "cephalosporins"
sample_data(yass)$cephalosporins[sample_data(yass)$study_condition=="Ceftriaxone"] <- 1
  
sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Trimetoprime and sulfadiazine, Cefalexin, Amoxicillin and clavulanic acid"] <- "multi"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Trimetoprime and sulfadiazine, Cefalexin, Amoxicillin and clavulanic acid"] <- 1
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Trimetoprime and sulfadiazine, Cefalexin, Amoxicillin and clavulanic acid"] <- 1
sample_data(yass)$cephalosporins[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Trimetoprime and sulfadiazine, Cefalexin, Amoxicillin and clavulanic acid"] <- 1
  
sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin, Amoxicillin and clavulanic acid, Amoxicillin, Amoxicillin and clavulanic acid, Trimetoprime and sulfadiazine, Azithromycin"] <- "multi"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Amoxicillin, Amoxicillin and clavulanic acid, Amoxicillin, Amoxicillin and clavulanic acid, Trimetoprime and sulfadiazine, Azithromycin"] <- 1
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Amoxicillin, Amoxicillin and clavulanic acid, Amoxicillin, Amoxicillin and clavulanic acid, Trimetoprime and sulfadiazine, Azithromycin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Azithromycin, Azithromycin"] <- "macrolides"
sample_data(yass)$macrolides[sample_data(yass)$study_condition=="Azithromycin, Azithromycin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin, Amoxicillin"] <- "penicillins"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Amoxicillin, Amoxicillin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Cefalexin, Amoxicillin and clavulanic acid"] <- "multi"
sample_data(yass)$cephalosporins[sample_data(yass)$study_condition=="Cefalexin, Amoxicillin and clavulanic acid"] <-  1
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Cefalexin, Amoxicillin and clavulanic acid"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Cefalexin, Cefalexin, Azithromycin, Amoxicillin"] <- "multi"
sample_data(yass)$cephalosporins[sample_data(yass)$study_condition=="Cefalexin, Cefalexin, Azithromycin, Amoxicillin"] <- 1
sample_data(yass)$macrolides[sample_data(yass)$study_condition=="Cefalexin, Cefalexin, Azithromycin, Amoxicillin"] <- 1
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Cefalexin, Cefalexin, Azithromycin, Amoxicillin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine, Azithromycin, Cefaclor"] <- "multi"
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine, Azithromycin, Cefaclor"] <- 1
sample_data(yass)$macrolides[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine, Azithromycin, Cefaclor"] <- 1
sample_data(yass)$cephalosporins[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine, Azithromycin, Cefaclor"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Systemic antibiotic NAS"] <- "other"
sample_data(yass)$other[sample_data(yass)$study_condition=="Systemic antibiotic NAS"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Azithromycin"] <- "multi"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Azithromycin"] <- 1
sample_data(yass)$macrolides[sample_data(yass)$study_condition=="Amoxicillin and clavulanic acid, Azithromycin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Cefalexin, Cefalexin, Trimetoprime and sulfadiazine"] <- "multi"
sample_data(yass)$cephalosporins[sample_data(yass)$study_condition=="Cefalexin, Cefalexin, Trimetoprime and sulfadiazine"] <- 1
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Cefalexin, Cefalexin, Trimetoprime and sulfadiazine"] <- 1
  
sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin, Systemic antibiotic NAS" ] <- "multi"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Amoxicillin, Systemic antibiotic NAS" ] <- 1
sample_data(yass)$other[sample_data(yass)$study_condition=="Amoxicillin, Systemic antibiotic NAS" ] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine, Trimetoprime and sulfadiazine, Amoxicillin, Amoxicillin"] <- "multi"
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine, Trimetoprime and sulfadiazine, Amoxicillin, Amoxicillin"] <- 1
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Trimetoprime and sulfadiazine, Trimetoprime and sulfadiazine, Amoxicillin, Amoxicillin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Amoxicillin, Trimetoprime and sulfadiazine, Amoxicillin"] <- "multi"
sample_data(yass)$penicillins[sample_data(yass)$study_condition=="Amoxicillin, Trimetoprime and sulfadiazine, Amoxicillin"] <- 1
sample_data(yass)$sulfonamides[sample_data(yass)$study_condition=="Amoxicillin, Trimetoprime and sulfadiazine, Amoxicillin"] <- 1

sample_data(yass)$abx[sample_data(yass)$study_condition=="Cefaclor, Cefalexin"] <- "cephalosporins"

sample_data(yass)$cephalosporins[sample_data(yass)$study_condition=="Cefaclor, Cefalexin"] <- 1


sample_data(yass)$abxsum <- sample_data(yass)$penicillins+sample_data(yass)$macrolides+sample_data(yass)$cephalosporins+sample_data(yass)$sulfonamides+sample_data(yass)$other
sample_data(yass)$multiabx <- 0
sample_data(yass)$multiabx[sample_data(yass)$abxsum>1] <- 1

```

```{r}
#ordu = ordinate(yass, "PCoA", "unifrac", weighted=TRUE)
#plot_ordination(yass, ordu, color="abx", shape="human")
#plot_ordination(yass, ordu, color="infant_age", shape="human")
```

## Individual PCOA plots

```{r}
pcoaPlot <- function(x){
  dd <- sample_data(yass)$study_condition
  dd.col <- rainbow(length(dd))
  names(dd.col)  <- dd
  subphylo <- prune_samples(sample_data(yass)$subject_id==x, x=yass)
  ordu <- ordinate(subphylo, "PCoA", "unifrac", weighted=TRUE)
  plot_ordination(yass, ordu, color="abx", label="infant_age")+geom_point(aes(size=infant_age))
}

```

```{r}
subjects <- yass %>% sample_data() %>% data.frame() %>%  arrange(desc(study_condition)) %>% .$subject_id %>% unique()
lapply(subjects, pcoaPlot)
```

### Group by age

```{r, warning=FALSE, message=FALSE}
sample_data(yass)$agecat[sample_data(yass)$infant_age<100] <- "0-99 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=100 & sample_data(yass)$infant_age < 200] <- "100-199 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=200 & sample_data(yass)$infant_age < 300] <- "200-299 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=300 & sample_data(yass)$infant_age < 400] <- "300-399 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=400 & sample_data(yass)$infant_age < 500] <- "400-499 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=500 & sample_data(yass)$infant_age < 600] <- "500-599 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=600 & sample_data(yass)$infant_age < 700] <- "600-699 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=700 & sample_data(yass)$infant_age < 800] <- "700-799 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=800 & sample_data(yass)$infant_age < 900] <- "800-899 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=900 & sample_data(yass)$infant_age < 1000] <- "900-999 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=1000 & sample_data(yass)$infant_age < 1100] <- "x1000-1099 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=1100 & sample_data(yass)$infant_age < 1200] <- "x1100-1199 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=1200 & sample_data(yass)$infant_age < 1300] <- "x1200-1299 days"
```

Function to plot those abx ordinations but stratified by age category

```{r}
pcoaPlot <- function(x){
  subphylo <- prune_samples(sample_data(yass)$agecat==x, x=yass)
  ordu = ordinate(subphylo, "PCoA", "unifrac", weighted=TRUE)
  plot = plot_ordination(subphylo, ordu, color="abx", shape="human")
  return(plot)
}
```

```{r}
agecats <- yass %>% sample_data() %>% .$agecat %>% unique()
listPlots <- lapply(agecats, pcoaPlot)

n <- length(listPlots)
nCol <- floor(sqrt(n))
do.call("grid.arrange", c(listPlots, ncol=nCol))
```

## PCA on all samples

```{r}
library(MicrobiotaProcess)
yasspca <- get_pca(obj=yass, method = "rclr")
pcaplot1 <- ggordpoint(obj=yasspca, biplot=TRUE,
                      factorNames=c("infant_age"), ellipse=TRUE) + theme(legend.position = "none")
pcaplot2 <- ggordpoint(obj=yasspca, pc=c(1, 3), biplot=TRUE,
                       factorNames=c("infant_age"), ellipse=TRUE)
pcaplot1 | pcaplot2
```

```{r}
yasspca <- get_pca(obj=yass, method = "rclr")
pcaplot1 <- ggordpoint(obj=yasspca, biplot=TRUE,
                      factorNames=c("agecat"), ellipse=TRUE) + theme(legend.position = "none")
pcaplot2 <- ggordpoint(obj=yasspca, pc=c(1, 3), biplot=TRUE,
                       factorNames=c("agecat"), ellipse=TRUE)
pcaplot1 | pcaplot2
```

```{r}
yassrda <- ordinate(yass, method="RDA")
plot_scree(yassrda) + coord_cartesian(xlim=c(1,25.9))

yasspcs <- scores(yassrda)$sites
```

## PCA on the control samples

Select controls

```{r}
yasscontrol <- subset_samples(yass, abxexpose==TRUE)
```

Run PCA

Try normalizing

```{r}
yasspca <- get_pca(obj=yasscontrol, method="rclr")
pcaplot1 <- ggordpoint(obj=yasspca, biplot=TRUE,
                      factorNames=c("agecat"), ellipse=TRUE)
pcaplot2 <- ggordpoint(obj=yasspca, pc=c(1, 3), biplot=TRUE,
                       factorNames=c("agecat"), ellipse=TRUE)
pcaplot1
pcaplot2
```

```{r}
yassrda <- ordinate(yasscontrol, method="RDA")
plot_scree(yassrda) + coord_cartesian(xlim=c(1,25.9))
```

## Using the overall PCA plot individuals

```{r}
yasspca <- ordinate(yass, method="RDA")
p <- plot_ordination(yass, yasspca, color="abx")

indpca <- function(x){
  psub <- p
  psub$data <- psub$data[psub$data$subject_id==x,]
  psub + geom_point(aes(size=infant_age))
}
lapply(subjects, indpca)
```

# Try modeling some taxa

Figure out when they were exposed to antibiotics exactly

```{r}
sampYass <- sample_data(yass) %>% data.frame()
sampYass <- sampYass %>% separate(study_condition,c("sc1","sc2", "sc3", "sc4", "sc5"),sep=",") %>% separate(duration,c("dur1","dur2", "dur3", "dur4", "dur5"), sep=",") %>%  separate(antibiotic_day,c("abday1","abday2", "abday3", "abday4", "abday5"),sep=",")
sampYass <- sampYass %>% rowwise() %>% mutate(
  dayssinceabx1 = infant_age - sum(as.numeric(dur1), as.numeric(abday1), na.rm = TRUE),
  dayssinceabx2 = infant_age - sum(as.numeric(dur2), as.numeric(abday2), na.rm = TRUE),
  dayssinceabx3 = infant_age - sum(as.numeric(dur3), as.numeric(abday3), na.rm = TRUE),
  dayssinceabx4 = infant_age - sum(as.numeric(dur4), as.numeric(abday4), na.rm = TRUE),
  dayssinceabx5 = infant_age - sum(as.numeric(dur5), as.numeric(abday5), na.rm = TRUE))

sampYass$dayssinceabx1[is.na(sampYass$sc1)] <- NA
sampYass$dayssinceabx2[is.na(sampYass$sc2)] <- NA
sampYass$dayssinceabx3[is.na(sampYass$sc3)] <- NA
sampYass$dayssinceabx4[is.na(sampYass$sc4)] <- NA
sampYass$dayssinceabx5[is.na(sampYass$sc5)] <- NA
sampYass$dayssinceabx1[sampYass$dayssinceabx1<0] <- 0
sampYass$dayssinceabx2[sampYass$dayssinceabx2<0] <- 0
sampYass$dayssinceabx3[sampYass$dayssinceabx3<0] <- 0
sampYass$dayssinceabx4[sampYass$dayssinceabx4<0] <- 0
sampYass$dayssinceabx5[sampYass$dayssinceabx5<0] <- 0

hist(sampYass$dayssinceabx2)
```

Oh no looks like we gotta fix some duplicated abx data entry first

```{r}
sample_data(yass)$study_condition[sample_data(yass)$sample_id=="SRR8119101"] <- "Amoxicillin, Trimetoprime and sulfadiazine, Azithroymycin"
sample_data(yass)$antibiotics_day[sample_data(yass)$sample_id=="SRR8119101"] <- "517.429, 517.429, 517.429"
sample_data(yass)$duration[sample_data(yass)$sample_id=="SRR8119101"] <- "7, 7, 7"

sample_data(yass)$study_condition[sample_data(yass)$sample_id=="SRR8120834"] <- "Trimetoprime and sulfadiazine, Amoxicillin, Amoxicillin"
sample_data(yass)$antibiotics_day[sample_data(yass)$sample_id=="SRR8120834"] <-  "486.992, 608.74, 700.051"
sample_data(yass)$duration[sample_data(yass)$sample_id=="SRR8120834"] <- "6, 5, 5"

sample_data(yass)$study_condition[sample_data(yass)$sample_id=="SRR8119766"] <- "Cefalexin, Trimetoprime and sulfadiazine"
sample_data(yass)$antibiotics_day[sample_data(yass)$sample_id=="SRR8119766"] <-  "639.177, 639.177"
sample_data(yass)$duration[sample_data(yass)$sample_id=="SRR8119766"] <- "7, 7"
```

```{r}
sY <- sample_data(sampYass)
sample_names(sY) <- sampYass$SampleID
sample_data(yass) <- sY
```

Add alpha diversity and PCs to the phyloseq object

```{r}
alpha <- estimate_richness(yass)
alpha$sample_id <- rownames(alpha)
head(alpha)
head(sample_data(yass))
library(microViz)
yass <- ps_join(yass, alpha)

yasspca <- ordinate(yass, method = "RDA")
yasspcs <- scores(yasspca)$sites
yasspcs <- data.frame(yasspcs)
yasspcs$sample_id <- rownames(yasspcs)

yass <- ps_join(yass, yasspcs) # We have the PCs but need to lag them

sY <- data.frame(sample_data(yass))
sY <- sY %>% dplyr::arrange(subject_id, infant_age) %>% group_by(subject_id) %>% mutate(prevShannon=lag(Shannon), prevPC1=lag(PC1), prevPC2=lag(PC2), prevpen=lag(penicillins), prevceph=lag(cephalosporins), prevmac=lag(macrolides), prevsulf=lag(sulfonamides), prevother = lag(other))

# Use the baseline microbiome measure for first samples lag terms
sY$prevShannon[is.na(sY$prevShannon)] <- sY$Shannon[is.na(sY$prevShannon)]
sY$prevPC1[is.na(sY$prevPC1)] <- sY$PC1[is.na(sY$prevPC1)]
sY$prevPC2[is.na(sY$prevPC2)] <- sY$PC2[is.na(sY$prevPC2)]

# Use the baseline antibiotics measure for first samples lag terms (all should be 0)
sY$prevpen[is.na(sY$prevpen)] <- 0
sY$prevceph[is.na(sY$prevceph)] <- 0
sY$prevmac[is.na(sY$prevmac)] <- 0
sY$prevsulf[is.na(sY$prevsulf)] <- 0
sY$prevother[is.na(sY$prevother)] <- 0

sYreduc <- sY %>% select(sample_id, prevShannon, prevPC1, prevPC2, prevpen,
                         prevceph, prevmac, prevsulf, prevother)
yass <- ps_join(yass, sYreduc)

sample_data(yass)$prevpen[is.na(sample_data(yass)$prevpen)] <- 0
sample_data(yass)$prevceph[is.na(sample_data(yass)$prevceph)] <- 0
sample_data(yass)$prevmac[is.na(sample_data(yass)$prevmac)] <- 0
sample_data(yass)$prevsulf[is.na(sample_data(yass)$prevsulf)] <- 0
sample_data(yass)$prevother[is.na(sample_data(yass)$prevother)] <- 0

sample_data(yass) %>% View()

```

\

We gotta turn this thing into something we can work with

## Limma

```{r}
library(limma)
library(microbiome)
library(phylosmith)
library(splines)

#voom transformation

dfyass <- data.frame(sample_data(yass))


# Testing a single interaction model
design <-model.matrix(~penicillins + macrolides + cephalosporins +
                        sulfonamides + other + bs(infant_age) + prevShannon + 
                        penicillins*prevShannon + macrolides*prevShannon + 
                        cephalosporins*prevShannon + sulfonamides*prevShannon +
                        prevpen + prevceph + prevmac + prevsulf + prevother
                        , data.frame(sample_data(yass)))

#PC1 model
design <-model.matrix(~penicillins + macrolides + cephalosporins +
                        sulfonamides + other + bs(infant_age) + prevPC1 + 
                        penicillins*prevPC1 + macrolides*prevPC1 + 
                        cephalosporins*prevPC1 + sulfonamides*prevPC1 +
                        prevpen + prevceph + prevmac + prevsulf + prevother
                        , data.frame(sample_data(yass)))
#PC2 model
design <-model.matrix(~penicillins + macrolides + cephalosporins +
                        sulfonamides + other + bs(infant_age) + prevPC2 + 
                        penicillins*prevPC2 + macrolides*prevPC2 + 
                        cephalosporins*prevPC2 + sulfonamides*prevPC2 +
                        prevpen + prevceph + prevmac + prevsulf + prevother
                        , data.frame(sample_data(yass)))

design <-model.matrix(~penicillins + macrolides + cephalosporins +
                        sulfonamides + other + bs(infant_age) + prevShannon + 
                        penicillins*prevShannon + macrolides*prevShannon + 
                        cephalosporins*prevShannon + sulfonamides*prevShannon +
                        penicillins*prevPC1 + macrolides*prevPC1 + 
                        cephalosporins*prevPC1 + sulfonamides*prevPC1 +
                        penicillins*prevPC2 + macrolides*prevPC2 + 
                        cephalosporins*prevPC2 + sulfonamides * prevPC2
                        , data.frame(sample_data(yass)))
otu <- abundances(microbiome::transform(yass, "log10"))
meta <- meta(yass)

library(edgeR)

yassfilt <- yass %>% taxa_filter(frequency=0.05)
d <- abundances(yassfilt)

y <- voom(d, design, plot = TRUE)

cor <- duplicateCorrelation(y, design, block=dfyass$subject_id)
fit <- lmFit(y, design, block=dfyass$subject_id, correlation = cor$consensus.correlation)
fit <- eBayes(fit)

pvals <- data.frame(fit$p.value)
pvals <- cbind(pvals, oldname=rownames(pvals))
inner_join(pvals, yasstax) %>% View()

 # Limma effect sizes
efs.limma <-  fit$coefficients[, "penicillins"]

# Summarise
library(kableExtra)
pen <- cbind(topTable(fit, coef=16, p.value=0.05, number=1000), oldname=rownames(topTable(fit, coef=16, p.value=0.05, number=1000)))

View(fit$coefficients)
```

Results function

```{r}
library(ggthemes)
vesuvius <- function(x){
  nametable <- cbind(topTable(fit, coef=x, p.value=0.05, number=1000), oldname=rownames(topTable(fit, coef=x, p.value=0.05, number=1000)))
  
nametable <- dplyr::inner_join(yasstax, nametable)
nametable$Rank7[nametable$Rank7=="none"] <- NA
nametable$Rank6[nametable$Rank6=="none"] <- NA
nametable$Rank5[nametable$Rank5=="none"] <- NA
nametable$famnew <- paste0("f_", nametable$Rank5)
nametable$Rank4[nametable$Rank4=="none"] <- NA
nametable$ordnew <- paste0("o_", nametable$Rank4)
nametable$Rank3[nametable$Rank3=="none"] <- NA
nametable$clanew <- paste0("c_", nametable$Rank3)
nametable$Rank2[nametable$Rank2=="none"] <- NA
nametable$phynew <- paste0("p_", nametable$Rank2)
nametable$Rank1[nametable$Rank1=="none"] <- NA
nametable$kinnew <- paste0("k_", nametable$Rank1)

nametable$specgen <- paste0("g_", nametable$Rank6, "_s_", nametable$Rank7) %>% str_replace(pattern="g__s_NA", "") %>% str_replace(pattern="_s_NA", "") %>% str_replace(pattern="g_NA", "")
nametable$specgen[nametable$specgen==""] <- NA
nametable$famnew[nametable$famnew=="f_NA"] <- NA
nametable$ordnew[nametable$ordnew=="o_NA"] <- NA
nametable$clanew[nametable$clanew=="c_NA"] <- NA

nametable <- nametable %>% mutate(newname=coalesce(specgen, famnew, ordnew, clanew, phynew, kinnew))

ggplot(data=nametable, aes(x=logFC, y=-log10(adj.P.Val), label=newname)) + geom_point() + ggrepel::geom_text_repel()+theme_clean()
}

library(ggthemes)
vesuvius(x=2)+ggtitle("Penicillins")
vesuvius(x=3)+ggtitle("Macrolides")
vesuvius(x=4)+ggtitle("Cephalosporins")
vesuvius(x=5)+ggtitle("Sulfonamides")

vesuvius(x=16)+ggtitle("Penicillins x lagged PC2")
vesuvius(x=17)+ggtitle("Macrolides x lagged PC2")
vesuvius(x=18)+ggtitle("Cephalosporins x lagged PC2")
vesuvius(x=19)+ggtitle("Sulfonamides x lagged PC2")
```

Create histogram + density plot

```{r}
# histogram first
pen <- data.frame(topTable(fit, 3, 1000))
pen$`BH-adjusted p`[pen$adj.P.Val>=0.05]<-"p >= 0.05"
pen$`BH-adjusted p`[pen$adj.P.Val<0.05]<-"p < 0.05"
pen$seq <- rownames(pen)
main <- ggplot() + geom_histogram(binwidth=.1, mapping=aes(x=logFC, fill=`BH-adjusted p`), data=pen)


int <- data.frame(topTable(fit, 17, 1000))
int$`BH-adjusted p`[pen$adj.P.Val>=0.05]<-"p >= 0.05"
int$`BH-adjusted p`[pen$adj.P.Val<0.05]<-"p < 0.05"
int$seq <- rownames(int)
comb <- dplyr::inner_join(pen, int, by="seq", suffix=c("main", "int"))
comb$logFC <- comb$logFCmain + comb$logFCint*4.18
comb$`BH-adjusted p`[comb$adj.P.Valint>=0.05]<-"p >= 0.05"
comb$`BH-adjusted p`[comb$adj.P.Valint<0.05]<-"p < 0.05"

main + geom_freqpoly(binwidth=0.1, alpha=0.4, mapping=aes(x=logFC, linetype="Interaction-modified logFC"), data=comb)   + ylab("Count")+theme_clean()+ggtitle("Macrolides and Shannon")+labs(linetype="")  + theme(legend.background = element_rect(color = NA))+ theme(legend.position = "bottom")

```

```{r}

plot(fit$coefficients[,2], fit$coefficients[,13])
vesuvius <- function(x){
  nametable <- cbind(topTable(fit, coef=x, p.value=0.05, number=1000), oldname=rownames(topTable(fit, coef=x, p.value=0.05, number=1000)))
  
nametable <- inner_join(yasstax, nametable)
nametable$Rank7[nametable$Rank7=="none"] <- NA
nametable$Rank6[nametable$Rank6=="none"] <- NA
nametable$Rank5[nametable$Rank5=="none"] <- NA
nametable$famnew <- paste0("f_", nametable$Rank5)
nametable$Rank4[nametable$Rank4=="none"] <- NA
nametable$ordnew <- paste0("o_", nametable$Rank4)
nametable$Rank3[nametable$Rank3=="none"] <- NA
nametable$clanew <- paste0("c_", nametable$Rank3)
nametable$Rank2[nametable$Rank2=="none"] <- NA
nametable$phynew <- paste0("p_", nametable$Rank2)
nametable$Rank1[nametable$Rank1=="none"] <- NA
nametable$kinnew <- paste0("k_", nametable$Rank1)

nametable$specgen <- paste0("g_", nametable$Rank6, "_s_", nametable$Rank7) %>% str_replace(pattern="g__s_NA", "") %>% str_replace(pattern="_s_NA", "") %>% str_replace(pattern="g_NA", "")
nametable$specgen[nametable$specgen==""] <- NA
nametable$famnew[nametable$famnew=="f_NA"] <- NA
nametable$ordnew[nametable$ordnew=="o_NA"] <- NA
nametable$clanew[nametable$clanew=="c_NA"] <- NA

nametable <- nametable %>% mutate(newname=coalesce(specgen, famnew, ordnew, clanew, phynew, kinnew))

ggplot(data=nametable, aes(x=logFC, y=-log10(adj.P.Val), label=newname)) + geom_point() + ggrepel::geom_text_repel()+theme_clean()
}
```

## Make supplemental tables

```{r}
suptab <- function(x){
  nametable <- cbind(topTable(fit, coef=x, p.value=1, number=1000), oldname=rownames(topTable(fit, coef=x, p.value=1, number=1000)))
  
nametable <- dplyr::inner_join(yasstax, nametable)
nametable$Rank7[nametable$Rank7=="none"] <- NA
nametable$Rank6[nametable$Rank6=="none"] <- NA
nametable$Rank5[nametable$Rank5=="none"] <- NA
nametable$famnew <- paste0("f_", nametable$Rank5)
nametable$Rank4[nametable$Rank4=="none"] <- NA
nametable$ordnew <- paste0("o_", nametable$Rank4)
nametable$Rank3[nametable$Rank3=="none"] <- NA
nametable$clanew <- paste0("c_", nametable$Rank3)
nametable$Rank2[nametable$Rank2=="none"] <- NA
nametable$phynew <- paste0("p_", nametable$Rank2)
nametable$Rank1[nametable$Rank1=="none"] <- NA
nametable$kinnew <- paste0("k_", nametable$Rank1)

nametable$specgen <- paste0("g_", nametable$Rank6, "_s_", nametable$Rank7) %>% str_replace(pattern="g__s_NA", "") %>% str_replace(pattern="_s_NA", "") %>% str_replace(pattern="g_NA", "")
nametable$specgen[nametable$specgen==""] <- NA
nametable$famnew[nametable$famnew=="f_NA"] <- NA
nametable$ordnew[nametable$ordnew=="o_NA"] <- NA
nametable$clanew[nametable$clanew=="c_NA"] <- NA

nametable <- nametable %>% dplyr::mutate(ASV=paste0(coalesce(specgen, famnew, ordnew, clanew, phynew, kinnew), "_", oldname)) %>% select(ASV, logFC, AveExpr, t, P.Value, adj.P.Val, B)


return(nametable)
}

a <- c(2,3,4,5,16,17,18,19)
b <- c("Penicillins", "Macrolides", "Cepalosporins", "Sulfonamides",
       "Penicillins x lagged PC2", "Macrolides x lagged PC2",
       "Cephalosporins x lagged PC2", "Sulfonamides x lagged PC2")
suptables <- data.frame(index=a,name=b)

lstables <- lapply(suptables[,1], suptab)
lstables[[1]]

file <- "aim2_supp_tables_pc2_all.xlsx"

library(openxlsx)
wb <- createWorkbook("aim2_supp_tables_set2")
for(i in 1:nrow(suptables)){
  print(suptables[i,2])
  addWorksheet(wb,suptables[i,2])
  writeData(wb,suptables[i,2], lstables[[i]])
}

saveWorkbook(wb, file, overwrite = TRUE)
```

Correlation plot between different antibiotic families

```{r}
library(corrplot)

corrplot(cor(fit$coefficients[,13:24]), method="square")
```

```{r}
write.fit(fit, file="limma results.tsv")
```

```{r}
# Scatterplots of coefficients
```

```{r}
qqt(fit$t[, 10], df = fit$df.residual + fit$df.prior); abline(0,1)
```

Limma results for penicillins

```{r}
volcanoplot(fit, coef=2, highlight=10)
```

```{r}
yass
colnames(phyloseq::tax_table(yass)) <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
yassra <-  transform_sample_counts(yass, function(x) x / sum(x) )
yasstse <- makeTreeSummarizedExperimentFromPhyloseq(yassra)
yasstse <- agglomerateByRank(yasstse, "phylum")
yasstidy <- tidy(yasstse, addPheno = TRUE)
yasstidy %>% group_by(SampleID) %>% summarize(ratotal = sum(value)) #Ensure that relative abundances make sense (all should be 1)

```

Create a data frame filtered for no multiple antibiotics exposure and only ones from the past 31 days

```{r}
yassfilt <- yasstidy[(yasstidy$dayssinceabx1<31 | is.na(yasstidy$dayssinceabx1)),]
yassfirm <- yasstidy[yasstidy$gene=="Firmicutes",]
hist(yassfirm$value)
```

```{r}
# Try modeling Shannon
# Try out limma and see if I can fit models in that
library(lme4)
library(splines)
mod1 <- lmer(value ~ penicillins + macrolides + cephalosporins + sulfonamides + other + penicillins*sulfonamides + bs(infant_age) + (1|subject_id), data=yassfirm)
summary(mod1)
library(lmerTest)
library(broom.mixed)
anova(mod1)
qqnorm(resid(mod1))

```

Create a function that automates filtering and modeling

```{r}
taxon_glm <- function(taxon) {
  yasstaxon <- yassfilt[yassfilt$gene==taxon,]
  if (yasstaxon$value[1] < 1000) {
  modfit <- tryCatch(lmer(value ~ penicillins + macrolides + cephalosporins +
                            sulfonamides + other + bs(infant_age) + (1|subject_id),
                          data=yasstaxon), 
                   error=function(e) NULL)
  fit <- tryCatch((broom.mixed::tidy(modfit)), error=function(e) NULL)
    if (dim(broom.mixed::tidy(modfit))[2] > 0) {
      return(cbind(fit, taxon))
    }
  #tryCatch(plot_summs(modfit, model.names=taxon), error=function(e) NULL)
  #tryCatch(qqnorm(resid(modfit), ylab=taxon), error=function(e) NULL)
  #tryCatch(qqline(resid(modfit)), error=function(e) NULL)
  }
}
```

### Phyla Models

```{r}
phyla <- unique(yassfilt$gene)
lapply(phyla, taxon_glm)

## calculate fdr (q<0.2)
## rank and look at estimates
```

### Class Models

```{r}

yasstse <- makeTreeSummarizedExperimentFromPhyloseq(yassra)
yassclass <- agglomerateByRank(yasstse, "class")
yasstidyclass <- tidy(yassclass, addPheno = TRUE)
yasstidyclass %>% group_by(SampleID) %>% summarize(ratotal = sum(value))
yassfilt <- yasstidyclass[(yasstidyclass$dayssinceabx1<31 | is.na(yasstidyclass$dayssinceabx1)) & yasstidyclass$multiabx==0,]
classes <- unique(yassfilt$gene)
classmods <- lapply(classes, taxon_glm)
```

Create synthetic variables for each abx class which is cumulative number of exposures (that time point + all following time points is cumulative number of exposures like macrolides is 1 and then goes to 2)

## Table 1 Descriptive Stats

### Antibiotics exposures

```{r}
sample_data(yass)$abx
dfyass <- data.frame(sample_data(yass))
dfyass$abxcondition[dfyass$abxexpose==TRUE]<-"Antibiotics Exposed"
dfyass$abxcondition[dfyass$abxexpose==FALSE]<-"Unexposed"


shannon <- phyloseq::estimate_richness(yass, measure="shannon")
shannon$X.SampleID <- rownames(shannon)
dfyass <- dplyr::inner_join(dfyass, shannon)


participants <- dfyass %>% group_by(subject_id) %>%
  summarize(`Birth Year`=first(Year.of.birth), 
            Country=first(Country), 
            Gender=first(Gender), 
            `Delivery Mode`=first(Delivery.type),
            `Gestational Age`=first(Gestational.age),
            Gender = first(gender),
            `Antibiotics Exposure`=first(abxcondition),
            `Shannon Alpha Diversity`=first(Shannon),
            `Assessments Completed`=n(),
            `# of Antibiotic Courses`=sum(!is.na(sc1))+
              sum(!is.na(sc2))+
              sum(!is.na(sc3))+
              sum(!is.na(sc4))+
              sum(!is.na(sc5)))

participants$`Birth Year` <- factor(participants$`Birth Year`)
participants$`Gender` <- factor(participants$`Gender`)
participants$`Country` <- factor(participants$`Country`)
participants$`Delivery Mode` <- factor(participants$`Delivery Mode`)
participants$`Antibiotics Exposure` <- factor(participants$`Antibiotics Exposure`)

table1(~ `Assessments Completed` + `# of Antibiotic Courses` + `Birth Year` + Gender + `Delivery Mode` + `Shannon Alpha Diversity`| `Antibiotics Exposure`, data=participants) %>% t1flex()
```

## Reason for abx

```{r}
dfyass$disease %>% table()
dfyass$disease %>% table() %>% prop.table()
```

## Infant age at enrollment

```{r}
dfyass %>% group_by(subject_id) %>% summarize(enrollage=min(infant_age)) %>%
  summarize(meanenroll=mean(enrollage), sdenroll = sd(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=min(infant_age)) %>%
  summarize(medianenroll=median(enrollage), minenroll = min(enrollage), maxenroll = max(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=min(infant_age), condition=max(abxexpose)) %>% filter(condition==1) %>% summarize(meanenroll=mean(enrollage), sdenroll = sd(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=min(infant_age), condition=max(abxexpose)) %>% filter(condition==0) %>% summarize(meanenroll=mean(enrollage), sdenroll = sd(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=min(infant_age), condition=max(abxexpose)) %>% filter(condition==1) %>% 
  summarize(medianenroll=median(enrollage), minenroll = min(enrollage), maxenroll = max(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=min(infant_age), condition=max(abxexpose)) %>% filter(condition==0) %>%
  summarize(medianenroll=median(enrollage), minenroll = min(enrollage), maxenroll = max(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=min(infant_age), condition=max(abxexpose)) %>% t.test(enrollage ~ condition, .)

```

## Infant age at end of study

```{r}
dfyass %>% group_by(subject_id) %>% summarize(enrollage=max(infant_age)) %>%
  summarize(meanenroll=mean(enrollage), sdenroll = sd(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=max(infant_age)) %>%
  summarize(medianenroll=median(enrollage), minenroll = min(enrollage), maxenroll = max(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=max(infant_age), condition=max(abxexpose)) %>% filter(condition==1) %>% summarize(meanenroll=mean(enrollage), sdenroll = sd(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=max(infant_age), condition=max(abxexpose)) %>% filter(condition==0) %>% summarize(meanenroll=mean(enrollage), sdenroll = sd(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=max(infant_age), condition=max(abxexpose)) %>% filter(condition==1) %>% 
  summarize(medianenroll=median(enrollage), minenroll = min(enrollage), maxenroll = max(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=max(infant_age), condition=max(abxexpose)) %>% filter(condition==0) %>%
  summarize(medianenroll=median(enrollage), minenroll = min(enrollage), maxenroll = max(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=max(infant_age), condition=max(abxexpose)) %>% t.test(enrollage ~ condition, .)
```

## Number of assessments

```{r}
dfyass %>% group_by(subject_id) %>% summarize(assess=n(), condition=max(abxexpose)) %>% t.test(assess ~ condition, .)
```

## Gender

```{r}
dfyass %>% group_by(subject_id) %>% summarize(gender=first(gender), condition=max(abxexpose)) %>% ungroup() %>%  summarise(chi = chisq.test(gender, condition)$statistic, df = chisq.test(gender, condition)$parameter, pval = chisq.test(gender, condition)$p.val)
```

## Delivery mode

```{r}
dfyass %>% group_by(subject_id) %>% summarize(deliver=first(Delivery.type), condition=max(abxexpose)) %>% ungroup() %>%  summarise(chi = chisq.test(deliver, condition)$statistic, df = chisq.test(deliver, condition)$parameter, p = chisq.test(deliver, condition)$p.val)
```

## Shannon

```{r}
dfyass %>% group_by(subject_id) %>% summarize(shan=first(Shannon), condition=max(abxexpose)) %>% t.test(shan ~ condition, .)
```

```{r}
dfyass %>% group_by(subject_id) %>% summarize(abx=sum(abxsum), condition=max(abxexpose)) %>% t.test(abx ~ condition, .)

dfyass %>% group_by(subject_id) %>% summarize(enrollage=sum(abxsum), condition=max(abxexpose)) %>% filter(condition==1) %>% summarize(meanenroll=mean(enrollage), sdenroll = sd(enrollage), median=median(enrollage), max=max(enrollage), min=min(enrollage))
```

# Table 2

```{r}
dfyass$penicillins %>% table()
dfyass$macrolides %>% table()
dfyass$cephalosporins %>% table()
dfyass$sulfonamides %>% table()
dfyass$other %>% table()
```
